#!/bin/sh
# script-startup.sh - Script robusto de inicializa√ß√£o para o container

set -e  # Para na primeira falha

echo "üöÄ === INICIANDO FOXBOT ===" 
echo "üìÖ Data/Hora: $(date)"
echo "üèóÔ∏è Node Version: $(node --version)"
echo "üì¶ NPM Version: $(npm --version)"

# Informa√ß√µes do ambiente
echo ""
echo "üîß === CONFIGURA√á√ïES ==="
echo "Bot: ${BOT_NAME:-'N√£o definido'}"
echo "Env: ${NODE_ENV:-'development'}"
echo "Port: ${PORT:-3000}"
echo "DB Host: ${DB_HOST:-'N√£o definido'}"
echo "Evolution API: ${EVOLUTION_API_URL:-'N√£o definido'}"
echo "SMTP: ${SMTP_HOST:-'N√£o definido'}:${SMTP_PORT:-587}"
echo "SMTP Secure: ${SMTP_SECURE:-false}"
echo "Skip SMTP Test: ${SKIP_SMTP_TEST:-false}"

# Verificar conectividade de rede
echo ""
echo "üåê === TESTANDO CONECTIVIDADE ==="

# Teste DNS
echo "üîç Testando DNS..."
if nslookup google.com > /dev/null 2>&1; then
    echo "‚úÖ DNS OK"
else
    echo "‚ùå DNS FALHOU"
    exit 1
fi

# Teste conectividade com DB
echo "üóÑÔ∏è Testando conectividade com banco..."
if [ -n "$DB_HOST" ]; then
    if nc -z "$DB_HOST" "${DB_PORT:-3306}" 2>/dev/null; then
        echo "‚úÖ Banco acess√≠vel: $DB_HOST:${DB_PORT:-3306}"
    else
        echo "‚ö†Ô∏è Banco n√£o acess√≠vel: $DB_HOST:${DB_PORT:-3306}"
        echo "   Continuando mesmo assim..."
    fi
else
    echo "‚ö†Ô∏è DB_HOST n√£o definido"
fi

# Teste conectividade com Evolution API
echo "üì± Testando conectividade com Evolution API..."
if [ -n "$EVOLUTION_API_URL" ]; then
    EVOLUTION_HOST=$(echo "$EVOLUTION_API_URL" | sed 's|https\?://||' | sed 's|/.*||')
    if nc -z "$EVOLUTION_HOST" 443 2>/dev/null; then
        echo "‚úÖ Evolution API acess√≠vel: $EVOLUTION_HOST"
    else
        echo "‚ö†Ô∏è Evolution API n√£o acess√≠vel: $EVOLUTION_HOST"
        echo "   Continuando mesmo assim..."
    fi
else
    echo "‚ö†Ô∏è EVOLUTION_API_URL n√£o definido"
fi

# Teste conectividade com SMTP
echo "üìß Testando conectividade com SMTP..."
if [ -n "$SMTP_HOST" ] && [ "$SKIP_SMTP_TEST" != "true" ]; then
    if nc -z "$SMTP_HOST" "${SMTP_PORT:-587}" 2>/dev/null; then
        echo "‚úÖ SMTP acess√≠vel: $SMTP_HOST:${SMTP_PORT:-587}"
    else
        echo "‚ö†Ô∏è SMTP n√£o acess√≠vel: $SMTP_HOST:${SMTP_PORT:-587}"
        echo "   Definindo SKIP_SMTP_TEST=true para continuar..."
        export SKIP_SMTP_TEST=true
    fi
else
    echo "‚è≠Ô∏è Teste SMTP ignorado"
fi

# Instala√ß√£o de depend√™ncias
echo ""
echo "üì¶ === INSTALANDO DEPEND√äNCIAS ==="

# Verificar se package.json existe
if [ ! -f "package.json" ]; then
    echo "‚ùå package.json n√£o encontrado!"
    exit 1
fi

echo "üìã Instalando pacotes npm..."
if npm install --only=production --no-audit --no-fund; then
    echo "‚úÖ Depend√™ncias instaladas com sucesso"
else
    echo "‚ùå Falha na instala√ß√£o de depend√™ncias"
    exit 1
fi

# Verificar estrutura de diret√≥rios
echo ""
echo "üìÅ === VERIFICANDO ESTRUTURA ==="

REQUIRED_DIRS=("src" "logs")
for dir in "${REQUIRED_DIRS[@]}"; do
    if [ ! -d "$dir" ]; then
        echo "üìÅ Criando diret√≥rio: $dir"
        mkdir -p "$dir"
    else
        echo "‚úÖ Diret√≥rio existe: $dir"
    fi
done

REQUIRED_FILES=("src/index.js")
for file in "${REQUIRED_FILES[@]}"; do
    if [ -f "$file" ]; then
        echo "‚úÖ Arquivo existe: $file"
    else
        echo "‚ùå Arquivo n√£o encontrado: $file"
        exit 1
    fi
done

# Verificar permiss√µes
echo ""
echo "üîê === VERIFICANDO PERMISS√ïES ==="
if [ -w "logs" ]; then
    echo "‚úÖ Diret√≥rio logs tem permiss√£o de escrita"
else
    echo "‚ö†Ô∏è Diret√≥rio logs sem permiss√£o de escrita"
    chmod 755 logs
fi

# Criar arquivo de teste de log
echo "$(date): Container iniciado" > logs/startup.log
if [ $? -eq 0 ]; then
    echo "‚úÖ Log de inicializa√ß√£o criado"
else
    echo "‚ö†Ô∏è N√£o foi poss√≠vel criar log de inicializa√ß√£o"
fi

# Inicializa√ß√£o da aplica√ß√£o
echo ""
echo "üéØ === INICIANDO APLICA√á√ÉO ==="
echo "‚è∞ $(date): Executando node src/index.js"

# Usar exec para substituir o processo shell
exec node src/index.js
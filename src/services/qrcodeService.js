const evolutionAPI = require('../config/evolution');

/**
 * Servi√ßo para gerenciar QR Code e conex√£o WhatsApp
 */
class QRCodeService {

    /**
     * Obt√©m QR Code para conex√£o da inst√¢ncia
     * @returns {Promise} QR Code em base64
     */
    static async obterQRCode() {
        try {
            console.log('üì± Solicitando QR Code da inst√¢ncia...');
            
            const response = await evolutionAPI.evolutionAPI.get(
                `/instance/qrcode/${process.env.EVOLUTION_INSTANCE_NAME}`
            );

            if (response.data && response.data.qrcode) {
                console.log('‚úÖ QR Code obtido com sucesso');
                return {
                    success: true,
                    data: {
                        qrcode: response.data.qrcode,
                        timestamp: new Date().toISOString(),
                        instanceName: process.env.EVOLUTION_INSTANCE_NAME
                    },
                    error: null
                };
            } else {
                console.log('‚ö†Ô∏è QR Code n√£o dispon√≠vel');
                return {
                    success: false,
                    data: null,
                    error: 'QR Code n√£o dispon√≠vel'
                };
            }

        } catch (error) {
            console.error('‚ùå Erro ao obter QR Code:', error.response?.data || error.message);
            return {
                success: false,
                data: null,
                error: error.response?.data?.message || error.message
            };
        }
    }

    /**
     * Verifica status detalhado da conex√£o
     * @returns {Promise} Status da conex√£o
     */
    static async verificarStatusConexao() {
        try {
            console.log('üîç Verificando status da conex√£o...');
            
            const response = await evolutionAPI.evolutionAPI.get(
                `/instance/connectionState/${process.env.EVOLUTION_INSTANCE_NAME}`
            );

            const status = response.data;
            console.log(`üìä Status da conex√£o: ${status.state}`);

            return {
                success: true,
                data: {
                    state: status.state,
                    instance: status.instance,
                    timestamp: new Date().toISOString(),
                    connected: status.state === 'open'
                },
                error: null
            };

        } catch (error) {
            console.error('‚ùå Erro ao verificar status:', error.response?.data || error.message);
            return {
                success: false,
                data: null,
                error: error.response?.data?.message || error.message
            };
        }
    }

    /**
     * Reinicia a inst√¢ncia para novo QR Code
     * @returns {Promise} Resultado da reinicializa√ß√£o
     */
    static async reiniciarInstancia() {
        try {
            console.log('üîÑ Reiniciando inst√¢ncia...');
            
            const response = await evolutionAPI.evolutionAPI.post(
                `/instance/restart/${process.env.EVOLUTION_INSTANCE_NAME}`
            );

            console.log('‚úÖ Inst√¢ncia reiniciada com sucesso');
            return {
                success: true,
                data: {
                    message: 'Inst√¢ncia reiniciada',
                    instance: process.env.EVOLUTION_INSTANCE_NAME,
                    timestamp: new Date().toISOString()
                },
                error: null
            };

        } catch (error) {
            console.error('‚ùå Erro ao reiniciar inst√¢ncia:', error.response?.data || error.message);
            return {
                success: false,
                data: null,
                error: error.response?.data?.message || error.message
            };
        }
    }

    /**
     * Desconecta a inst√¢ncia
     * @returns {Promise} Resultado da desconex√£o
     */
    static async desconectarInstancia() {
        try {
            console.log('üîå Desconectando inst√¢ncia...');
            
            const response = await evolutionAPI.evolutionAPI.post(
                `/instance/disconnect/${process.env.EVOLUTION_INSTANCE_NAME}`
            );

            console.log('‚úÖ Inst√¢ncia desconectada com sucesso');
            return {
                success: true,
                data: {
                    message: 'Inst√¢ncia desconectada',
                    instance: process.env.EVOLUTION_INSTANCE_NAME,
                    timestamp: new Date().toISOString()
                },
                error: null
            };

        } catch (error) {
            console.error('‚ùå Erro ao desconectar inst√¢ncia:', error.response?.data || error.message);
            return {
                success: false,
                data: null,
                error: error.response?.data?.message || error.message
            };
        }
    }

    /**
     * Obt√©m informa√ß√µes completas da inst√¢ncia
     * @returns {Promise} Informa√ß√µes da inst√¢ncia
     */
    static async obterInformacoesInstancia() {
        try {
            console.log('üìã Obtendo informa√ß√µes da inst√¢ncia...');
            
            const response = await evolutionAPI.evolutionAPI.get(
                `/instance/fetchInstances/${process.env.EVOLUTION_INSTANCE_NAME}`
            );

            const info = response.data;
            console.log('‚úÖ Informa√ß√µes obtidas com sucesso');

            return {
                success: true,
                data: {
                    instanceName: info.instanceName,
                    status: info.status,
                    serverUrl: info.serverUrl,
                    webhookUrl: info.webhook?.url,
                    webhookEvents: info.webhook?.events,
                    timestamp: new Date().toISOString()
                },
                error: null
            };

        } catch (error) {
            console.error('‚ùå Erro ao obter informa√ß√µes:', error.response?.data || error.message);
            return {
                success: false,
                data: null,
                error: error.response?.data?.message || error.message
            };
        }
    }

    /**
     * Monitora conex√£o at√© estabelecer ou falhar
     * @param {number} maxTentativas - M√°ximo de tentativas
     * @param {number} intervalo - Intervalo entre verifica√ß√µes (ms)
     * @returns {Promise} Status final da conex√£o
     */
    static async monitorarConexao(maxTentativas = 30, intervalo = 2000) {
        try {
            console.log(`üïê Monitorando conex√£o (${maxTentativas} tentativas)...`);
            
            for (let tentativa = 1; tentativa <= maxTentativas; tentativa++) {
                const status = await this.verificarStatusConexao();
                
                if (status.success && status.data.connected) {
                    console.log(`‚úÖ Conex√£o estabelecida na tentativa ${tentativa}`);
                    return {
                        success: true,
                        data: {
                            connected: true,
                            tentativas: tentativa,
                            status: status.data,
                            timestamp: new Date().toISOString()
                        },
                        error: null
                    };
                }

                console.log(`‚è≥ Tentativa ${tentativa}/${maxTentativas} - Status: ${status.data?.state || 'unknown'}`);
                
                if (tentativa < maxTentativas) {
                    await new Promise(resolve => setTimeout(resolve, intervalo));
                }
            }

            console.log('‚ö†Ô∏è Tempo limite para conex√£o excedido');
            return {
                success: false,
                data: null,
                error: `Conex√£o n√£o estabelecida ap√≥s ${maxTentativas} tentativas`
            };

        } catch (error) {
            console.error('‚ùå Erro no monitoramento:', error.message);
            return {
                success: false,
                data: null,
                error: error.message
            };
        }
    }

    /**
     * Processo completo de conex√£o com QR Code
     * @returns {Promise} Resultado do processo de conex√£o
     */
    static async iniciarProcessoConexao() {
        try {
            console.log('üöÄ Iniciando processo de conex√£o...');
            
            // 1. Verifica status atual
            const statusAtual = await this.verificarStatusConexao();
            
            if (statusAtual.success && statusAtual.data.connected) {
                console.log('‚úÖ Inst√¢ncia j√° conectada');
                return {
                    success: true,
                    data: {
                        alreadyConnected: true,
                        status: statusAtual.data,
                        timestamp: new Date().toISOString()
                    },
                    error: null
                };
            }

            // 2. Reinicia inst√¢ncia para gerar novo QR
            const reinicio = await this.reiniciarInstancia();
            if (!reinicio.success) {
                return reinicio;
            }

            // 3. Aguarda um momento para estabilizar
            await new Promise(resolve => setTimeout(resolve, 3000));

            // 4. Obt√©m QR Code
            const qrCode = await this.obterQRCode();
            if (!qrCode.success) {
                return qrCode;
            }

            console.log('‚úÖ Processo de conex√£o iniciado com sucesso');
            return {
                success: true,
                data: {
                    qrcode: qrCode.data.qrcode,
                    instanceName: process.env.EVOLUTION_INSTANCE_NAME,
                    message: 'Escaneie o QR Code com seu WhatsApp',
                    timestamp: new Date().toISOString()
                },
                error: null
            };

        } catch (error) {
            console.error('‚ùå Erro no processo de conex√£o:', error.message);
            return {
                success: false,
                data: null,
                error: error.message
            };
        }
    }
}

module.exports = QRCodeService;